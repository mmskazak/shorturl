// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: shorturl.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortURLService_InternalStats_FullMethodName        = "/proto.ShortURLService/InternalStats"
	ShortURLService_DeleteUserURLs_FullMethodName       = "/proto.ShortURLService/DeleteUserURLs"
	ShortURLService_FindUserURLs_FullMethodName         = "/proto.ShortURLService/FindUserURLs"
	ShortURLService_SaveShortenURLsBatch_FullMethodName = "/proto.ShortURLService/SaveShortenURLsBatch"
	ShortURLService_HandleCreateShortURL_FullMethodName = "/proto.ShortURLService/HandleCreateShortURL"
)

// ShortURLServiceClient is the client API for ShortURLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortURLServiceClient interface {
	InternalStats(ctx context.Context, in *InternalStatsRequest, opts ...grpc.CallOption) (*InternalStatsResponse, error)
	DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*DeleteUserURLsResponse, error)
	FindUserURLs(ctx context.Context, in *FindUserURLsRequest, opts ...grpc.CallOption) (*FindUserURLsResponse, error)
	SaveShortenURLsBatch(ctx context.Context, in *SaveShortenURLsBatchRequest, opts ...grpc.CallOption) (*SaveShortenURLsBatchResponse, error)
	HandleCreateShortURL(ctx context.Context, in *HandleCreateShortURLRequest, opts ...grpc.CallOption) (*HandleCreateShortURLResponse, error)
}

type shortURLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortURLServiceClient(cc grpc.ClientConnInterface) ShortURLServiceClient {
	return &shortURLServiceClient{cc}
}

func (c *shortURLServiceClient) InternalStats(ctx context.Context, in *InternalStatsRequest, opts ...grpc.CallOption) (*InternalStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalStatsResponse)
	err := c.cc.Invoke(ctx, ShortURLService_InternalStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*DeleteUserURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserURLsResponse)
	err := c.cc.Invoke(ctx, ShortURLService_DeleteUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) FindUserURLs(ctx context.Context, in *FindUserURLsRequest, opts ...grpc.CallOption) (*FindUserURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserURLsResponse)
	err := c.cc.Invoke(ctx, ShortURLService_FindUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) SaveShortenURLsBatch(ctx context.Context, in *SaveShortenURLsBatchRequest, opts ...grpc.CallOption) (*SaveShortenURLsBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveShortenURLsBatchResponse)
	err := c.cc.Invoke(ctx, ShortURLService_SaveShortenURLsBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) HandleCreateShortURL(ctx context.Context, in *HandleCreateShortURLRequest, opts ...grpc.CallOption) (*HandleCreateShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleCreateShortURLResponse)
	err := c.cc.Invoke(ctx, ShortURLService_HandleCreateShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLServiceServer is the server API for ShortURLService service.
// All implementations must embed UnimplementedShortURLServiceServer
// for forward compatibility.
type ShortURLServiceServer interface {
	InternalStats(context.Context, *InternalStatsRequest) (*InternalStatsResponse, error)
	DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*DeleteUserURLsResponse, error)
	FindUserURLs(context.Context, *FindUserURLsRequest) (*FindUserURLsResponse, error)
	SaveShortenURLsBatch(context.Context, *SaveShortenURLsBatchRequest) (*SaveShortenURLsBatchResponse, error)
	HandleCreateShortURL(context.Context, *HandleCreateShortURLRequest) (*HandleCreateShortURLResponse, error)
	mustEmbedUnimplementedShortURLServiceServer()
}

// UnimplementedShortURLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortURLServiceServer struct{}

func (UnimplementedShortURLServiceServer) InternalStats(context.Context, *InternalStatsRequest) (*InternalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalStats not implemented")
}
func (UnimplementedShortURLServiceServer) DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*DeleteUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLs not implemented")
}
func (UnimplementedShortURLServiceServer) FindUserURLs(context.Context, *FindUserURLsRequest) (*FindUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserURLs not implemented")
}
func (UnimplementedShortURLServiceServer) SaveShortenURLsBatch(context.Context, *SaveShortenURLsBatchRequest) (*SaveShortenURLsBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveShortenURLsBatch not implemented")
}
func (UnimplementedShortURLServiceServer) HandleCreateShortURL(context.Context, *HandleCreateShortURLRequest) (*HandleCreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCreateShortURL not implemented")
}
func (UnimplementedShortURLServiceServer) mustEmbedUnimplementedShortURLServiceServer() {}
func (UnimplementedShortURLServiceServer) testEmbeddedByValue()                         {}

// UnsafeShortURLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortURLServiceServer will
// result in compilation errors.
type UnsafeShortURLServiceServer interface {
	mustEmbedUnimplementedShortURLServiceServer()
}

func RegisterShortURLServiceServer(s grpc.ServiceRegistrar, srv ShortURLServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortURLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortURLService_ServiceDesc, srv)
}

func _ShortURLService_InternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).InternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_InternalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).InternalStats(ctx, req.(*InternalStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_DeleteUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).DeleteUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_DeleteUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).DeleteUserURLs(ctx, req.(*DeleteUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_FindUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).FindUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_FindUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).FindUserURLs(ctx, req.(*FindUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_SaveShortenURLsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveShortenURLsBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).SaveShortenURLsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_SaveShortenURLsBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).SaveShortenURLsBatch(ctx, req.(*SaveShortenURLsBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_HandleCreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleCreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).HandleCreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_HandleCreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).HandleCreateShortURL(ctx, req.(*HandleCreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortURLService_ServiceDesc is the grpc.ServiceDesc for ShortURLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortURLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShortURLService",
	HandlerType: (*ShortURLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InternalStats",
			Handler:    _ShortURLService_InternalStats_Handler,
		},
		{
			MethodName: "DeleteUserURLs",
			Handler:    _ShortURLService_DeleteUserURLs_Handler,
		},
		{
			MethodName: "FindUserURLs",
			Handler:    _ShortURLService_FindUserURLs_Handler,
		},
		{
			MethodName: "SaveShortenURLsBatch",
			Handler:    _ShortURLService_SaveShortenURLsBatch_Handler,
		},
		{
			MethodName: "HandleCreateShortURL",
			Handler:    _ShortURLService_HandleCreateShortURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorturl.proto",
}
