// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/web/web.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetShortURL mocks base method.
func (m *MockStorage) GetShortURL(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURL", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURL indicates an expected call of GetShortURL.
func (mr *MockStorageMockRecorder) GetShortURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURL", reflect.TypeOf((*MockStorage)(nil).GetShortURL), id)
}

// SetShortURL mocks base method.
func (m *MockStorage) SetShortURL(id, targetURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShortURL", id, targetURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetShortURL indicates an expected call of SetShortURL.
func (mr *MockStorageMockRecorder) SetShortURL(id, targetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShortURL", reflect.TypeOf((*MockStorage)(nil).SetShortURL), id, targetURL)
}

// MockIGenIDForURL is a mock of IGenIDForURL interface.
type MockIGenIDForURL struct {
	ctrl     *gomock.Controller
	recorder *MockIGenIDForURLMockRecorder
}

// MockIGenIDForURLMockRecorder is the mock recorder for MockIGenIDForURL.
type MockIGenIDForURLMockRecorder struct {
	mock *MockIGenIDForURL
}

// NewMockIGenIDForURL creates a new mock instance.
func NewMockIGenIDForURL(ctrl *gomock.Controller) *MockIGenIDForURL {
	mock := &MockIGenIDForURL{ctrl: ctrl}
	mock.recorder = &MockIGenIDForURLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGenIDForURL) EXPECT() *MockIGenIDForURLMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIGenIDForURL) Generate(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockIGenIDForURLMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIGenIDForURL)(nil).Generate), arg0)
}

// MockPinger is a mock of Pinger interface.
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
}

// MockPingerMockRecorder is the mock recorder for MockPinger.
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance.
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPinger) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingerMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPinger)(nil).Ping))
}
